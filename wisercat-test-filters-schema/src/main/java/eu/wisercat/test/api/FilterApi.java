/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package eu.wisercat.test.api;

import eu.wisercat.test.model.AddFilterRequest;
import eu.wisercat.test.model.ErrorResponse;
import eu.wisercat.test.model.FilterResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-11-16T13:43:47.298280500+02:00[Europe/Tallinn]")
@Validated
@Tag(name = "Filter", description = "Operations related to querying or adding filter/s")
public interface FilterApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /filter
     * Endpoint is used for adding new filter
     *
     * @param addFilterRequest Filter with corresponding criteria request (required)
     * @return Filter and related criteria information response (status code 200)
     *         or Filter not found (status code 404)
     *         or Unprocessable Entity (status code 422)
     *         or Internal server error/ technical error (status code 500)
     */
    @Operation(
        operationId = "addFilter",
        description = "Endpoint is used for adding new filter",
        tags = { "Filter" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Filter and related criteria information response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FilterResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Filter not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error/ technical error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/filter",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<FilterResponse> addFilter(
        @Parameter(name = "AddFilterRequest", description = "Filter with corresponding criteria request", required = true) @Valid @RequestBody AddFilterRequest addFilterRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"selection\" : 0, \"criteria\" : [ { \"parameter\" : \"More\", \"type\" : \"Amount\", \"value\" : \"value\" }, { \"parameter\" : \"More\", \"type\" : \"Amount\", \"value\" : \"value\" } ], \"filterName\" : \"filterName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /filters
     * Endpoint is used for querying all filters
     *
     * @return Filter and related criteria information response. Response may contain one or more filters. (status code 200)
     *         or Filter not found (status code 404)
     *         or Unprocessable Entity (status code 422)
     *         or Internal server error/ technical error (status code 500)
     */
    @Operation(
        operationId = "getFilters",
        description = "Endpoint is used for querying all filters",
        tags = { "Filter" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Filter and related criteria information response. Response may contain one or more filters.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FilterResponse.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Filter not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error/ technical error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/filters",
        produces = { "application/json" }
    )
    default ResponseEntity<List<FilterResponse>> getFilters(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"selection\" : 0, \"criteria\" : [ { \"parameter\" : \"More\", \"type\" : \"Amount\", \"value\" : \"value\" }, { \"parameter\" : \"More\", \"type\" : \"Amount\", \"value\" : \"value\" } ], \"filterName\" : \"filterName\" }, { \"selection\" : 0, \"criteria\" : [ { \"parameter\" : \"More\", \"type\" : \"Amount\", \"value\" : \"value\" }, { \"parameter\" : \"More\", \"type\" : \"Amount\", \"value\" : \"value\" } ], \"filterName\" : \"filterName\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
